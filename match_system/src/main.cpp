// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.


#include "match_server/Match.h"
// 调用客户端save服务所需的Save.h
#include "save_client/Save.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

// 调用客户端save服务所需的thrift系统头文件
#include <thrift/transport/TTransportUtils.h>
#include <thrift/transport/TSocket.h>

#include <iostream>
#include "thread"
#include "mutex"
#include "condition_variable"
#include "queue"
#include "vector"
#include "unistd.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match_service;
using namespace ::save_service; // 引入源自save.thrift的命名空间
using namespace std; // 多人开发不要这样写



struct Task{
    User user;
    string type;
};

// 定义消息队列结构体：消息的队列、锁和条件变量
struct MessageQueue{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

class Poll{
    public:
        void add(User user){
            users.push_back(user);
        }

        void remove(User user){
            for(uint32_t i = 0; i < users.size(); i++){
                if(users[i].id == user.id){
                    users.erase(users.begin() + i);
                    break;
                }
            }
        }

        void match(){
            while(users.size() > 1){
                // 1.按序列，直接相邻匹配
                // printf("队列长度为：%ld\n", users.size());
                // auto a = users[0];
                // auto b = users[1];
                // users.erase(users.begin());
                // users.erase(users.begin());

                // 2.按序列，根据分差匹配(进行自定义排序)
                // 如果循环一遍没有任何人匹配，要break掉避免再while导致死循环
                sort(users.begin(), users.end(),[&](User &a,User b){
                        return a.score<b.score;
                        });
                bool flag = true;
                for(uint32_t i = 1 ; i <users.size(); i++) {
                    auto a = users[i-1],b = users[i];
                    if (b.score-a.score<=50){
                        users.erase(users.begin()+i,users.begin()+i+1);

                        save_result(a.id,b.id);
                        flag = false;
                        break;
                    }
                }
                if (flag){
                    break;
                }

            }

        }

        void save_result(int a, int b){
            printf("%d 和 %d匹配成功\n", a, b);
            // 保存在server端，因此用server端的ip
            std::shared_ptr<TTransport> socket(new TSocket("123.57.67.128", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol); // 此处修改为Save
            try {
                transport->open();
                // 2.补充中间部分

                // 主义,通过 server 用户名和md5加密后的密码，才能把数据保存到 myserver 的 result.txt ，再加上两个用户
                int res = client.save_data("acs_9080", "c3945d7e", a, b);
                if (!res) puts("save success");
                else puts("save failed");

                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }


        }

    private:
        vector<User> users;
}pool;


class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        /**
         * user: 添加的用户信息
         * info: 附加信息
         * 在匹配池中添加一个名用户
         * 
         * @param user
         * @param info
         */
        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all();

            return 0;
        }

        /**
         * user: 删除的用户信息
         * info: 附加信息
         * 从匹配池中删除一名用户
         * 
         * @param user
         * @param info
         */
        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all();// notify_one也可以，因为这里只有一个；remove也是task操作；


            return 0;
        }

};


void consume_task(){
    while(true){
        unique_lock<mutex> lck(message_queue.m); // 上锁
        if(message_queue.q.empty()){
            // 1.考虑到上锁判空可能死循环，可以将消息队列阻塞
            // message_queue.cv.wait(lck);
            // 2.每1s执行一次
            lck.unlock();
            pool.match();
            sleep(1);
        }
        else{
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock(); // 解锁
            // do task
            if(task.type == "add") pool.add(task.user);
            else if(task.type == "remove") pool.remove(task.user);

            pool.match(); // 匹配
        }

    }
}


int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);


    cout << "Start Match Server" << endl;
    // 给消费者单开一个队列
    thread matching_thread(consume_task);

    server.serve();

    return 0;
}

